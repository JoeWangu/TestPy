###print() = display###

use # to write comments

###input = input from user###

###to call a defined function >
print("start")
function_py()
print("finish")
###

arithmetic operations
     print(10 + 3) = adds
     print(10 - 3) = subtracts
     print(10 / 3) = divides then gives float
     print(10 // 3) = divides then gives integer
     print(10 * 3) = multiplies
     print(10 ** 3) = gives power
     print(10 % 3) = gives remainder

augmented assignment operations
     shortens code eg.
     x = 10
     x = x + 3  in short form will be:
     x +=3

BODMAS order
      parenthesis
      exponentiation 2**3
      multiplication or division
      addition or subtraction

rounding of numbers
      x = 2.9
      print(round(x))

always returning a positive number
      x = -2.9
      print(abs(x))

when doing complex math calculations at the top of the code
write import math to access its functions
      eg. import math
          print(math.floor(2.9))
to learn more operations search "python 3 math modules"

Boolean True or False should start with capital

if operations
 is_hot = True
 if is_hot:
      print("do go out")
 else:
      print("don't go out")
 print("stay cool")

 elif(short for else if)
 eg.is_hot = True
    is_cold = False
 if is_hot:
      print("it's a hot day")
      print("drink plenty of water")
 elif is_cold :
      print("it's a cold day")
      print("wear warm clothes")
 else:
      print("it's a lovely day")
 print("enjoy your day")

price = 1000000
has_good_credit = True
if has_good_credit :
   down_payment = 0.1 * price
else :
    down_payment = 0.2 * price
print(f"down payment: ${down_payment}")

Logical operations
and : both should be true
or : only one should be true
not : converts to opposite

comparison operators
   eg.temp = 30
      if temp < or > or ==(equals to) or <= or >= or !=(not equal)

while loop
    eg.i = 1
while i <= 5:
      print("x" * i)
      i = i + 1
print("Done")

guessing game using while loop
    secret_number = 9
guess_count = 0
guess_limit = 3
while guess_count < guess_limit :
     guess = int(input('Guess: '))
     guess_count += 1
     if guess == secret_number :
            print("correct guess you win!")
            break
else:
      print("wrong guess you lose!")

For loops
prices = [10, 11, 12, 13, 14, 15]
total = 0
for price in prices:
       total += price
print(f"total: ${total}")

Nested loops
for x in range(5) :
    for y in range(5):
        print(f'{x} , {y}')

finding the greatest no
numbers = [1,2,3,4,5,6,7,8,9]
max = numbers[0]
for number in numbers:
    if number > max:
        max = number
print (max)

Removing duplicates
numbers = [2,2,3,6,8,0,6]
duplicates = []
for number in numbers:
    if number not in duplicates:
        duplicates.append(number)
print(duplicates)

dictionary(stores values for an item) eg
mouse = {
    "make":"dell",
    "age":2,
    "is 2.5ghz":"true"
}
print(mouse["make"])

phone_number = input("phone: ")
number = {
    "1":"one",
    "2":"two",
    "3":"three",
    "4":"four",
    "5":"five",
    "6":"six",
    "7":"seven",
    "8":"eight",
    "9":"nine",
    "0":"zero"
}
output = ""
for ch in phone_number:
    output += number.get(ch, "!") + " "
print(output)


message = input(">")
words = message.split(' ')
emojis = {
    ":)":"😁",
    ":(":"😔"
}
output = ""
for word in words:
    output += emojis.get(word, word) + " "
print(output)
###to get emojis press win + fullstop


parameters
def parameters_py(heading , head_ing):
    print(f"{heading} {head_ing}")
    print("Be a pro")

parameters_py("python for beginners" , "new book")
parameters_py("py for beginners" , "old book")


keyword arguments are used to define position of parameters
eg
def parameters_py(heading , head_ing):
    print(f"{heading} {head_ing}")
    print("Be a pro")

parameters_py(head_ing = "python for beginners" ,heading = "new book")
parameters_py(head_ing = "py for beginners" , heading = "old book")


return statement return values
eg
def returnstatement_py(number):
    return number * number


print(returnstatement_py(3))



creating a reusable function
eg use dictionary then define parameter as input then return output
and print
def emojis_converter(message):
    words = message.split(' ')
    emojis = {
        ":)":"😁",
        ":(":"😔"
    }
    output = ""
    for word in words:
        output += emojis.get(word, word) + " "
    return output


message = input(">")
print(emojis_converter(message))


exceptions
this is to handle errors that crash the program eg 
ZeroDivisionError and ValueError below
def exceptions_py():
    try:
        age = int(input("age?"))
        income = 50000
        risk = income/age
        print(risk)
    except ZeroDivisionError:
        print("age cannot be zero")
    except ValueError:
        print("invalid value")

exceptions_py()

3:02:00 - classes

packages - a folder that contains related modules
eg.random package(already built in python)

4:32:32